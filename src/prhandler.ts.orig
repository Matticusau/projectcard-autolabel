//
// Author:  Matt Lavery
// Date:    2020-06-18
// Purpose: Pull Request handler
//
// When         Who         What
// ------------------------------------------------------------------------------------------
//

import { CoreModule, GitHubModule, Context } from './types' // , Client
import { IssueLabels } from './classes/issuelabels';

// export default async function prHandler(core: CoreModule, context: Context, client: Client) { //, octokit: Client
export default async function prHandler(core: CoreModule, github: GitHubModule) {

    const prnumber = getPrNumber(github.context);
    if (!prnumber) {
      core.debug('Could not get pull request number from context, exiting');
      return;
    }
    core.debug(`Processing PR ${prnumber}!`);
  
    // This should be a token with access to your repository scoped in as a secret.
    // The YML workflow will need to set myToken with the GitHub Secret Token
    // myToken: ${{ secrets.GITHUB_TOKEN }}
    // https://help.github.com/en/actions/automating-your-workflow-with-github-actions/authenticating-with-the-github_token#about-the-github_token-secret
    const myToken = core.getInput('repo-token');

    const octokit = github.getOctokit(myToken);
    // core.debug('octokit: ' + JSON.stringify(octokit));

    // You can also pass in additional options as a second parameter to getOctokit
    // const octokit = github.getOctokit(myToken, {userAgent: "MyActionVersion1"});

    // core.debug('client.pulls.list()');
    // const { data: pullRequestList } = await octokit.pulls.list({
    //   // ...context.repo,
    //   owner: github.context.repo.owner,
    //   repo: github.context.repo.repo,
    //   state: "all"
    // });
    // core.debug('pullRequestList: ' + JSON.stringify(pullRequestList));

    // add the welcome message if needed
    // check if this is a new PR
    if (github.context.eventName === 'pull_request' && github.context.payload.action === 'opened') {
      // await addWelcomeMessage(core, context, client, pullRequest.number);
      await addWelcomeMessage(core, github, prnumber);
    }

    // set the labels
    await assignLabelStates(core, github, prnumber);

    // merge if ready
    await mergeIfReady(core, github, prnumber);
}


function getPrNumber(context: Context): number | undefined {
  const pullRequest = context.payload.pull_request;
  if (!pullRequest) {
    return undefined;
  }

  return pullRequest.number;
}

// async function addWelcomeMessage(core: CoreModule, context: Context, client: Client, prnumber: number) {
async function addWelcomeMessage(core: CoreModule, github: GitHubModule, prnumber: number) {

  try {
    core.debug('Called addWelcomeMessage()');
    const welcomeMessage = core.getInput('welcome-message');
    const myToken = core.getInput('repo-token');

    // check if this is a new PR
    if (github.context.eventName === 'pull_request' && github.context.payload.action !== 'opened') {
      core.debug('No issue or pull request was opened, skipping');
      return;
    }

    const octokit = github.getOctokit(myToken);

    // const octokit = github.getOctokit(myToken);
    await octokit.issues.createComment({
      owner: github.context.repo.owner,
      repo: github.context.repo.repo,
      issue_number: prnumber,
      body: welcomeMessage
    });
  }
  catch (error) {
    core.setFailed(error.message);
    throw error;
  }

}


async function assignLabelStates(core: CoreModule, github: GitHubModule, prnumber: number) {

  try {
    core.debug('Called assignLabelStates()');
    const myToken = core.getInput('repo-token');
    const octokit = github.getOctokit(myToken);

    // core.debug('octokit.pulls.get()');
    // core.debug('owner: ' + github.context.repo.owner);
    // core.debug('repo: ' + github.context.repo.repo);
    // core.debug('pull_number: ' + prnumber);
    const { data: pullRequest } = await octokit.pulls.get({
      ...github.context.repo,
      pull_number: prnumber,
    });
    const { data: pullRequestReviews } = await octokit.pulls.listReviews({
      ...github.context.repo,
      pull_number: prnumber,
    });
    // core.debug('<< start PR payload >>');
    // core.debug(pullRequest);
    // core.debug('<< end PR payload >>');
    
    // make sure the PR is open
    if (pullRequest.state !== 'closed') {

      // check if still open
      core.debug('github.context.payload.action: ' + github.context.payload.action);
      // if (github.context.payload.action !== 'closed') {
        if (pullRequest.merged === false) {
          if (pullRequest.mergeable === true && (pullRequest.mergeable_state === 'clean' || pullRequest.mergeable_state === 'unstable')) {
            await octokit.issues.addLabels({
              owner: github.context.repo.owner,
              repo: github.context.repo.repo,
              issue_number: prnumber,
              labels: ['qualifies-for-auto-merge']
            });
          } else if (pullRequest.requested_reviewers.length >= 0 && pullRequestReviews.length === 0) {
            await octokit.issues.addLabels({
              owner: github.context.repo.owner,
              repo: github.context.repo.repo,
              issue_number: prnumber,
              labels: ['review-required']
            });
            
          }
        } else {
          core.info(`PR #${prnumber} is merged, no action taken`);

        }
      // }
    } else {
      core.info(`PR #${prnumber} is closed, no action taken`);
    }
    
  }
  catch (error) {
    core.setFailed(error.message);
    throw error;
  }

}


async function mergeIfReady(core: CoreModule, github: GitHubModule, prnumber: number) {

  try {
    core.debug('Called mergeIfReady()');
    const myToken = core.getInput('repo-token');
    const octokit = github.getOctokit(myToken);

    const { data: pullRequest } = await octokit.pulls.get({
      ...github.context.repo,
      pull_number: prnumber,
    });
    const { data: pullRequestReviews } = await octokit.pulls.listReviews({
      ...github.context.repo,
      pull_number: prnumber,
    });
     
    // make sure the PR is open
    if (pullRequest.state !== 'closed') {
      if (pullRequest.merged === false) {
        if (pullRequest.mergeable === true && (pullRequest.mergeable_state === 'clean' || pullRequest.mergeable_state === 'unstable')) {

          // check the labels
          const { data: issueLabelsData } = await octokit.issues.listLabelsOnIssue({
            ...github.context.repo,
            issue_number: prnumber,
          });
          var issueLabels = new IssueLabels(issueLabelsData);
          const readyToMergeLabel = (issueLabels.hasLabelFromList(['ready-to-merge']));
          const NotReadyToMergeLabel = (issueLabels.hasLabelFromList(['review-required','do-not-merge']));
          
          if (readyToMergeLabel && !NotReadyToMergeLabel) {

            await octokit.pulls.merge({
              owner: github.context.repo.owner,
              repo: github.context.repo.repo,
              pull_number: prnumber,
              sha : pullRequest.head.sha, // safe guard no other pushes since starting action
              merge_method: 'merge' //config.method,
            });
          } else {
            core.info(`PR #${prnumber} labels do not allow merge`);
          }
        }
      }
    } else {
      core.info(`PR #${prnumber} is closed, no action taken`);
    }
    
  }
  catch (error) {
    core.setFailed(error.message);
    throw error;
  }

}
